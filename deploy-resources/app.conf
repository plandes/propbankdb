[cli]
apps = list: ${cli_config_default:apps}, cleaner_cli, show_config_cli, app
cleanups = list: ${cli_config_default:cleanups}, cleaner_cli, app, app_decorator

[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf,
    resource(zensols.util): resources/cleaner.conf

[log_cli]
loggers = dict: {
  'zensols.install': 'info',
  'zensols.db': 'info'}

[cleaner_cli]
paths = eval: (
  ('${default:temporary_dir}', '*.log', '**/__pycache__'),
  ('${default:data_dir}/stage', '${default:data_dir}/arch'),
  ('${default:data_dir}',))

[cleaner_cli_decorator]
option_overrides = dict: {'clean_level': {'default': 1}}

[config_cli]
expect = False

[config_import]
references = list: default, app, package

[config_imp]
type = import
config_files = list: 
    ^{config_path},
    resource(zensols.deeplearn): resources/default.conf,
    resource(zensols.deepnlp): resources/default.conf,
    resource(zensols.propbankdb): resources/default.conf,
    deploy-resources/obj.yml,
    ^{config_path},
    resource(zensols.deeplearn): resources/obj.conf,
    resource(zensols.nlp): resources/obj.conf,
    resource(zensols.nlp): resources/component.conf,
    resource(zensols.deepnlp): resources/obj.conf,
    resource(zensols.propbankdb): resources/obj.yml,
    resource(zensols.propbankdb): resources/embed.yml,
    deploy-resources/obj.yml,
    ^{config_path}

[app]
class_name = zensols.propbankdb.dapp.LoadApplication
loader = instance: pbdb_db_loader
embedding_generator = instance: pbdb_embedding_generator
packager = instance: pbdb_packager
cleaner = instance: cleaner_cli

[app_decorator]
option_excludes = set: loader, embedding_generator, packager, cleaner
option_overrides = dict: {
  'frameset_limit': {'long_name': 'number', 'short_name': 'n'}}
